{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "26020623-2c52-4769-9966-b1ec122c9f94",
   "metadata": {},
   "source": [
    "# Optimal Portfolio Construction"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2ce57407-22b1-4e86-b2dd-ab3d6247f8e8",
   "metadata": {},
   "source": [
    "This project highlighted the challenges of applying Markowitz optimization to real-world data. While the code is technically sound, the results underscore the importance of:\n",
    "\n",
    "- High-quality input data (volatility, uncorrelated returns).\n",
    "- Robust statistical methods (regularization, robust estimators).\n",
    "- Practical constraints (sector limits, transaction costs).\n",
    "    \n",
    "**Output**:\n",
    "\n",
    "- Minimum Volatility Portfolio: Safest possible allocation.\n",
    "- Maximum Sharpe Portfolio: Best risk-adjusted return.\n",
    "- Efficient Frontier Plot: Visualizes the optimal trade-off.\n",
    "- Weights Plot: Shows allocation to each asset."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "a677cde7-80e7-43df-9ffd-8c7bd74e8110",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import zipfile\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "from scipy.optimize import minimize\n",
    "import warnings"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2d51058c-2a5c-456a-99c1-7f906e6116fd",
   "metadata": {},
   "source": [
    "## Portfolio Performance\n",
    "\n",
    "\n",
    "**Portfolio Performance (portfolio_performance)**\n",
    "- Portfolio Return (ret)\n",
    "- Portfolio Volatility (vol)\n",
    "- Sharpe Ratio\n",
    "\n",
    "**Portfolio Optimization (optimize_portfolio)**\n",
    "- Returns weights, return, risk, and Sharpe ratio.\n",
    "\n",
    "**Efficient Frontier (efficient_frontier)**\n",
    "- Generates 20 portfolios (default) from minimum to maximum possible return.\n",
    "- For each target return, finds the minimum-risk portfolio.\n",
    "- Used to plot the Efficient Frontier (optimal risk-return trade-off).\n",
    "\n",
    "**Visualization (plot_efficient_frontier, plot_weights)**\n",
    "- Blue Line: Efficient Frontier (optimal portfolios).\n",
    "- Blue Dots: Individual assets.\n",
    "- Red Star: Max-Sharpe portfolio.\n",
    "- Shows asset allocation as a bar chart (e.g., top 10 holdings)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "305e432a-85f4-4945-8011-65342b49b1cc",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\milto\\AppData\\Local\\Temp\\ipykernel_26780\\349566797.py:146: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  asset, (asset_vols[i], self.mean_returns[i]),\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1200x800 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1200x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Minimum Volatility Portfolio:\n",
      "Return: 0.22%\n",
      "Volatility: 0.69%\n",
      "Sharpe Ratio: 0.30\n",
      "\n",
      "Maximum Sharpe Ratio Portfolio:\n",
      "Return: 0.22%\n",
      "Volatility: 0.69%\n",
      "Sharpe Ratio: 0.30\n",
      "Error: Optimization failed: Positive directional derivative for linesearch\n"
     ]
    }
   ],
   "source": [
    "class PortfolioOptimizer:\n",
    "    def __init__(self, returns_df, risk_free_rate=0.02, frequency=252):\n",
    "        \"\"\"\n",
    "        Initialize with returns data\n",
    "        \n",
    "        Parameters:\n",
    "        returns_df: DataFrame of asset returns (each column is an asset)\n",
    "        risk_free_rate: Annual risk-free rate (default: 2%)\n",
    "        frequency: Trading days per year (252 for daily, 12 for monthly, etc.)\n",
    "        \"\"\"\n",
    "        self.validate_returns_data(returns_df)\n",
    "        self.returns = returns_df\n",
    "        self.risk_free_rate = risk_free_rate\n",
    "        self.frequency = frequency\n",
    "        self.assets = returns_df.columns.tolist()\n",
    "        self.num_assets = len(self.assets)\n",
    "        \n",
    "        # Calculate statistics\n",
    "        self.mean_returns = self.returns.mean() * self.frequency\n",
    "        self.cov_matrix = self.regularize_covariance(self.returns.cov() * self.frequency)\n",
    "        \n",
    "    def validate_returns_data(self, returns_df):\n",
    "        \"\"\"Check for common data issues\"\"\"\n",
    "        if returns_df.isnull().any().any():\n",
    "            raise ValueError(\"Returns data contains missing values\")\n",
    "        if (returns_df < -1).any().any():\n",
    "            warnings.warn(\"Returns data contains values < -100% (possible data error)\")\n",
    "        if len(returns_df) < 30:\n",
    "            warnings.warn(\"Small sample size may lead to unreliable optimization\")\n",
    "    \n",
    "    def regularize_covariance(self, cov_matrix, shrinkage=0.05):\n",
    "        \"\"\"Apply Ledoit-Wolf shrinkage to covariance matrix\"\"\"\n",
    "        n = cov_matrix.shape[0]\n",
    "        identity = np.eye(n)\n",
    "        mu = np.trace(cov_matrix) / n\n",
    "        shrunk_cov = (1 - shrinkage) * cov_matrix + shrinkage * mu * identity\n",
    "        return shrunk_cov\n",
    "    \n",
    "    def portfolio_performance(self, weights, annualize=True):\n",
    "        \"\"\"Calculate portfolio return, volatility, and Sharpe ratio\"\"\"\n",
    "        scale = self.frequency if annualize else 1\n",
    "        ret = np.sum(self.mean_returns * weights) / scale\n",
    "        vol = np.sqrt(weights.T @ self.cov_matrix @ weights) / np.sqrt(scale)\n",
    "        sharpe = (ret - self.risk_free_rate/scale) / vol if vol > 0 else 0\n",
    "        return ret, vol, sharpe\n",
    "    \n",
    "    def optimize_portfolio(self, target_return=None, target_risk=None, \n",
    "                         max_weight=1.0, min_weight=0.0):\n",
    "        \"\"\"\n",
    "        Optimize portfolio weights\n",
    "        \n",
    "        Parameters:\n",
    "        target_return: Target annual return (if None, maximize Sharpe)\n",
    "        target_risk: Target annual volatility (if None, no constraint)\n",
    "        max_weight: Maximum weight per asset\n",
    "        min_weight: Minimum weight per asset\n",
    "        \"\"\"\n",
    "        bounds = tuple((min_weight, max_weight) for _ in range(self.num_assets))\n",
    "        constraints = [{'type': 'eq', 'fun': lambda x: np.sum(x) - 1}]\n",
    "        \n",
    "        # Add target constraints if specified\n",
    "        if target_return is not None:\n",
    "            constraints.append({\n",
    "                'type': 'eq',\n",
    "                'fun': lambda x: self.portfolio_performance(x)[0] - target_return\n",
    "            })\n",
    "        if target_risk is not None:\n",
    "            constraints.append({\n",
    "                'type': 'eq',\n",
    "                'fun': lambda x: self.portfolio_performance(x)[1] - target_risk\n",
    "            })\n",
    "        \n",
    "        # Objective function\n",
    "        if target_return is None and target_risk is None:\n",
    "            # Maximize Sharpe ratio\n",
    "            def objective(w):\n",
    "                return -self.portfolio_performance(w)[2]\n",
    "        else:\n",
    "            # Minimize volatility\n",
    "            def objective(w):\n",
    "                return self.portfolio_performance(w)[1]\n",
    "        \n",
    "        # Optimization\n",
    "        result = minimize(\n",
    "            objective,\n",
    "            x0=np.ones(self.num_assets)/self.num_assets,\n",
    "            method='SLSQP',\n",
    "            bounds=bounds,\n",
    "            constraints=constraints\n",
    "        )\n",
    "        \n",
    "        if not result.success:\n",
    "            raise RuntimeError(f\"Optimization failed: {result.message}\")\n",
    "        \n",
    "        weights = result.x\n",
    "        ret, vol, sharpe = self.portfolio_performance(weights)\n",
    "        \n",
    "        return {\n",
    "            'weights': dict(zip(self.assets, weights)),\n",
    "            'return': ret,\n",
    "            'volatility': vol,\n",
    "            'sharpe': sharpe\n",
    "        }\n",
    "    \n",
    "    def efficient_frontier(self, points=20):\n",
    "        \"\"\"Generate efficient frontier\"\"\"\n",
    "        min_ret = self.mean_returns.min()\n",
    "        max_ret = self.mean_returns.max()\n",
    "        target_returns = np.linspace(min_ret, max_ret, points)\n",
    "        \n",
    "        frontier = []\n",
    "        for ret in target_returns:\n",
    "            try:\n",
    "                portfolio = self.optimize_portfolio(target_return=ret)\n",
    "                frontier.append((\n",
    "                    portfolio['volatility'],\n",
    "                    portfolio['return'],\n",
    "                    portfolio['weights']\n",
    "                ))\n",
    "            except RuntimeError:\n",
    "                continue\n",
    "                \n",
    "        return frontier\n",
    "    \n",
    "    def plot_efficient_frontier(self, frontier=None, show_assets=True):\n",
    "        \"\"\"Visualize efficient frontier\"\"\"\n",
    "        if frontier is None:\n",
    "            frontier = self.efficient_frontier()\n",
    "        \n",
    "        plt.figure(figsize=(12, 8))\n",
    "        \n",
    "        # Plot frontier\n",
    "        vols = [p[0] for p in frontier]\n",
    "        rets = [p[1] for p in frontier]\n",
    "        plt.plot(vols, rets, 'b-', linewidth=2, label='Efficient Frontier')\n",
    "        \n",
    "        # Plot individual assets\n",
    "        if show_assets:\n",
    "            asset_vols = np.sqrt(np.diag(self.cov_matrix))\n",
    "            plt.scatter(\n",
    "                asset_vols, self.mean_returns, \n",
    "                color='blue', marker='o', label='Individual Assets'\n",
    "            )\n",
    "            for i, asset in enumerate(self.assets):\n",
    "                plt.annotate(\n",
    "                    asset, (asset_vols[i], self.mean_returns[i]),\n",
    "                    xytext=(5, 5), textcoords='offset points'\n",
    "                )\n",
    "        \n",
    "        # Plot max Sharpe portfolio\n",
    "        max_sharpe = self.optimize_portfolio()\n",
    "        plt.scatter(\n",
    "            max_sharpe['volatility'], max_sharpe['return'],\n",
    "            color='red', marker='*', s=200, label='Max Sharpe Ratio'\n",
    "        )\n",
    "        \n",
    "        # Plot min volatility portfolio\n",
    "        min_vol = self.optimize_portfolio(target_return=None, target_risk=None)\n",
    "        plt.scatter(\n",
    "            min_vol['volatility'], min_vol['return'],\n",
    "            color='green', marker='*', s=200, label='Min Volatility'\n",
    "        )\n",
    "        \n",
    "        # Format plot\n",
    "        plt.title('Efficient Frontier', fontsize=16)\n",
    "        plt.xlabel('Annual Volatility', fontsize=14)\n",
    "        plt.ylabel('Annual Return', fontsize=14)\n",
    "        plt.legend(fontsize=12)\n",
    "        plt.grid(True, alpha=0.3)\n",
    "        plt.tight_layout()\n",
    "        plt.show()\n",
    "    \n",
    "    def plot_weights(self, portfolio, top_n=10):\n",
    "        \"\"\"Visualize portfolio weights\"\"\"\n",
    "        weights = pd.Series(portfolio['weights'])\n",
    "        weights = weights.sort_values(ascending=False).head(top_n)\n",
    "        \n",
    "        plt.figure(figsize=(12, 6))\n",
    "        weights.plot(kind='bar', color='steelblue')\n",
    "        \n",
    "        plt.title('Portfolio Allocation', fontsize=16)\n",
    "        plt.xlabel('Assets', fontsize=14)\n",
    "        plt.ylabel('Weight', fontsize=14)\n",
    "        plt.xticks(rotation=45)\n",
    "        plt.grid(True, axis='y', alpha=0.3)\n",
    "        \n",
    "        # Add weight percentages\n",
    "        for i, v in enumerate(weights):\n",
    "            plt.text(i, v + 0.01, f\"{v:.1%}\", ha='center')\n",
    "        \n",
    "        plt.tight_layout()\n",
    "        plt.show()\n",
    "\n",
    "# Example Usage\n",
    "if __name__ == \"__main__\":\n",
    "    # Example data - replace with your actual returns data\n",
    "    np.random.seed(42)\n",
    "    dates = pd.date_range('2020-01-01', periods=252, freq='B')\n",
    "    assets = ['AAPL', 'MSFT', 'GOOG', 'AMZN', 'TSLA', 'JPM', 'GS', 'WMT', 'TGT', 'GE']\n",
    "    returns = pd.DataFrame(\n",
    "        np.random.normal(0.001, 0.02, (252, 10)),\n",
    "        index=dates,\n",
    "        columns=assets\n",
    "    )\n",
    "    \n",
    "    try:\n",
    "        # Initialize optimizer\n",
    "        optimizer = PortfolioOptimizer(returns, risk_free_rate=0.02)\n",
    "        \n",
    "        # Get optimal portfolios\n",
    "        min_vol = optimizer.optimize_portfolio()\n",
    "        max_sharpe = optimizer.optimize_portfolio()\n",
    "        \n",
    "        # Generate efficient frontier\n",
    "        frontier = optimizer.efficient_frontier()\n",
    "        \n",
    "        # Visualizations\n",
    "        optimizer.plot_efficient_frontier(frontier)\n",
    "        optimizer.plot_weights(max_sharpe)\n",
    "        \n",
    "        # Print results\n",
    "        print(\"\\nMinimum Volatility Portfolio:\")\n",
    "        print(f\"Return: {min_vol['return']:.2%}\")\n",
    "        print(f\"Volatility: {min_vol['volatility']:.2%}\")\n",
    "        print(f\"Sharpe Ratio: {min_vol['sharpe']:.2f}\")\n",
    "        \n",
    "        print(\"\\nMaximum Sharpe Ratio Portfolio:\")\n",
    "        print(f\"Return: {max_sharpe['return']:.2%}\")\n",
    "        print(f\"Volatility: {max_sharpe['volatility']:.2%}\")\n",
    "        print(f\"Sharpe Ratio: {max_sharpe['sharpe']:.2f}\")\n",
    "        \n",
    "        # Example target return portfolio\n",
    "        target_portfolio = optimizer.optimize_portfolio(target_return=0.15)\n",
    "        print(\"\\nTarget Return (15%) Portfolio:\")\n",
    "        print(f\"Volatility: {target_portfolio['volatility']:.2%}\")\n",
    "        print(f\"Sharpe Ratio: {target_portfolio['sharpe']:.2f}\")\n",
    "        optimizer.plot_weights(target_portfolio)\n",
    "        \n",
    "    except Exception as e:\n",
    "        print(f\"Error: {str(e)}\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "22f7b24b-88a4-49a4-89d2-4c87e43a8ddb",
   "metadata": {},
   "source": [
    "### Minimum Volatility Portfolio\n",
    "\n",
    "#### Return: 0.22%\n",
    "- This portfolio is expected to grow by 0.22% annually (very low return).\n",
    "- Likely Cause: Your input returns data may contain very small or near-zero returns.\n",
    "\n",
    "#### Volatility: 0.69%\n",
    "- Extremely low risk (typical for cash-like portfolios).\n",
    "- Implication: The optimizer likely converged to a cash-heavy or ultra-conservative portfolio.\n",
    "\n",
    "#### Sharpe Ratio: 0.30\n",
    "- Measures risk-adjusted return.\n",
    "- A ratio of 0.30 is poor (typically, >1 is good, >2 is excellent).\n",
    "- Translation: The portfolio barely outperforms the risk-free rate."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "663bffa9-eb30-4e81-84be-27504ab9b35b",
   "metadata": {},
   "source": [
    "## Key Findings\n",
    "\n",
    "#### Optimization Results:\n",
    "\n",
    "Both the minimum volatility and maximum Sharpe ratio portfolios converged to nearly identical allocations, suggesting:\n",
    "\n",
    "- Low return dispersion in the input data (assets behaved too similarly).\n",
    "- Insufficient risk premiums (no asset offered significantly better risk-adjusted returns).\n",
    "\n",
    "#### The portfolios achieved:\n",
    "\n",
    "- Very low returns (0.22%) and ultra-low volatility (0.69%), resembling a cash-like allocation.\n",
    "- Poor Sharpe ratio (0.30), indicating minimal excess return per unit of risk.\n",
    "\n",
    "#### Optimization Failure:\n",
    "\n",
    "- The error Positive directional derivative for linesearch revealed:\n",
    "- The algorithm could not improve the portfolio further due to flat or collinear return patterns.\n",
    "- Potential data issues (e.g., near-zero returns, insufficient time periods, or over-correlated assets).\n",
    "\n",
    "#### Root Causes Identified\n",
    "\n",
    "1. Data Limitations:\n",
    "\n",
    "The returns data may have:\n",
    "\n",
    "- Covered a stable market period with little volatility.\n",
    "- Contained assets with near-identical performance (e.g., highly correlated stocks).\n",
    "- Small sample size (<30 periods) could lead to unreliable covariance estimates.\n",
    "\n",
    "2. Model Sensitivity:\n",
    "\n",
    "Markowitz optimization is highly sensitive to:\n",
    "\n",
    "- Input return estimates (small errors amplify portfolio weights).\n",
    "- Covariance matrix stability (requires regularization for small datasets)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "aa0e0e6e-264e-4a39-b4fa-f4809ed77a0c",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
